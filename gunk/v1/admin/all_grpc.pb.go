// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package adminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	AddGenre(ctx context.Context, in *AddGenreRequest, opts ...grpc.CallOption) (*AddGenreResponse, error)
	EditGenre(ctx context.Context, in *EditGenreRequest, opts ...grpc.CallOption) (*EditGenreResponse, error)
	DeleteGenre(ctx context.Context, in *EditGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error)
	AddMovie(ctx context.Context, in *AddMovieRequest, opts ...grpc.CallOption) (*AddMovieResponse, error)
	EditMovie(ctx context.Context, in *EditMovieRequest, opts ...grpc.CallOption) (*EditMovieResponse, error)
	DeleteMovie(ctx context.Context, in *EditMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) AddGenre(ctx context.Context, in *AddGenreRequest, opts ...grpc.CallOption) (*AddGenreResponse, error) {
	out := new(AddGenreResponse)
	err := c.cc.Invoke(ctx, "/adminpb.adminService/AddGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EditGenre(ctx context.Context, in *EditGenreRequest, opts ...grpc.CallOption) (*EditGenreResponse, error) {
	out := new(EditGenreResponse)
	err := c.cc.Invoke(ctx, "/adminpb.adminService/EditGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteGenre(ctx context.Context, in *EditGenreRequest, opts ...grpc.CallOption) (*DeleteGenreResponse, error) {
	out := new(DeleteGenreResponse)
	err := c.cc.Invoke(ctx, "/adminpb.adminService/DeleteGenre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AddMovie(ctx context.Context, in *AddMovieRequest, opts ...grpc.CallOption) (*AddMovieResponse, error) {
	out := new(AddMovieResponse)
	err := c.cc.Invoke(ctx, "/adminpb.adminService/AddMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EditMovie(ctx context.Context, in *EditMovieRequest, opts ...grpc.CallOption) (*EditMovieResponse, error) {
	out := new(EditMovieResponse)
	err := c.cc.Invoke(ctx, "/adminpb.adminService/EditMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteMovie(ctx context.Context, in *EditMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, "/adminpb.adminService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	AddGenre(context.Context, *AddGenreRequest) (*AddGenreResponse, error)
	EditGenre(context.Context, *EditGenreRequest) (*EditGenreResponse, error)
	DeleteGenre(context.Context, *EditGenreRequest) (*DeleteGenreResponse, error)
	AddMovie(context.Context, *AddMovieRequest) (*AddMovieResponse, error)
	EditMovie(context.Context, *EditMovieRequest) (*EditMovieResponse, error)
	DeleteMovie(context.Context, *EditMovieRequest) (*DeleteMovieResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) AddGenre(context.Context, *AddGenreRequest) (*AddGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenre not implemented")
}
func (UnimplementedAdminServiceServer) EditGenre(context.Context, *EditGenreRequest) (*EditGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGenre not implemented")
}
func (UnimplementedAdminServiceServer) DeleteGenre(context.Context, *EditGenreRequest) (*DeleteGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGenre not implemented")
}
func (UnimplementedAdminServiceServer) AddMovie(context.Context, *AddMovieRequest) (*AddMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovie not implemented")
}
func (UnimplementedAdminServiceServer) EditMovie(context.Context, *EditMovieRequest) (*EditMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMovie not implemented")
}
func (UnimplementedAdminServiceServer) DeleteMovie(context.Context, *EditMovieRequest) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_AddGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.adminService/AddGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddGenre(ctx, req.(*AddGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EditGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EditGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.adminService/EditGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EditGenre(ctx, req.(*EditGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.adminService/DeleteGenre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteGenre(ctx, req.(*EditGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AddMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AddMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.adminService/AddMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AddMovie(ctx, req.(*AddMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EditMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).EditMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.adminService/EditMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).EditMovie(ctx, req.(*EditMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.adminService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteMovie(ctx, req.(*EditMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adminpb.adminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenre",
			Handler:    _AdminService_AddGenre_Handler,
		},
		{
			MethodName: "EditGenre",
			Handler:    _AdminService_EditGenre_Handler,
		},
		{
			MethodName: "DeleteGenre",
			Handler:    _AdminService_DeleteGenre_Handler,
		},
		{
			MethodName: "AddMovie",
			Handler:    _AdminService_AddMovie_Handler,
		},
		{
			MethodName: "EditMovie",
			Handler:    _AdminService_EditMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _AdminService_DeleteMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "practice/IMDB/gunk/v1/admin/all.proto",
}
